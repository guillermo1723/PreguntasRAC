import { useState } from "react";
import "./App.css";

const preguntas = [
  {
    pregunta: "Â¿QuÃ© ocurre si la red interconectada (Interconnect) entre los nodos de un clÃºster Oracle RAC falla?",
    opciones: [
      "A) Los nodos dejan de responder y el clÃºster se apaga.",
      "B) Los nodos intentan reconectarse automÃ¡ticamente, pero las sesiones activas se pierden.",
      "C) El Global Resource Directory (GRD) se sincroniza automÃ¡ticamente en discos compartidos para evitar problemas de consistencia.",
      "D) El clÃºster sigue funcionando, pero con una latencia significativamente alta.",
    ],
    correcta: 2,
  },
  {
    pregunta: "En un entorno Oracle RAC, Â¿cuÃ¡l es el propÃ³sito del Global Cache Management (GCM)?",
    opciones: [
      "A) Coordinar el acceso concurrente a bloques de datos entre los nodos del clÃºster.Almacenar los datos",
      "B) Proveer una copia de seguridad automÃ¡tica de la base de datos compartida.",
      "C) Optimizar la transferencia de datos entre los clientes y el clÃºster.",
      "D) Gestionar la escalabilidad horizontal del sistema operativo.",
    ],
    correcta: 0,
  },
  {
    pregunta: "Â¿QuÃ© componente gestiona el almacenamiento en RAC?",
    opciones: [
      "ASM",
      "GES",
      "Global Cache",
      "Clusterware",
    ],
    correcta: 0,
  },
  {
    pregunta: "Â¿QuÃ© pasa si un nodo falla en Oracle RAC?",
    opciones: [
      "La base de datos se detiene",
      "Las transacciones se pierden",
      "Otros nodos asumen la carga",
      "Los datos se eliminan",
    ],
    correcta: 2,
  },
  {
    pregunta: "En un sistema Oracle RAC, Â¿quÃ© beneficio proporciona ASM (Automatic Storage Management) en comparaciÃ³n con otros mÃ©todos de almacenamiento?",
    opciones: [
      "A) Evita la necesidad de red interconectada.",
      "B) Optimiza el rendimiento del clÃºster al realizar balanceo de carga dinÃ¡mico en los discos.",
      "C) Elimina por completo la posibilidad de fallos de almacenamiento.",
      "D) Reduce la necesidad de nodos adicionales en el clÃºster.",
    ],
    correcta: 1,
  },
];

function App() {
  const [indicePregunta, setIndicePregunta] = useState(0);
  const [mostrarResultado, setMostrarResultado] = useState(false);
  const [respuestaCorrecta, setRespuestaCorrecta] = useState(false);

  const manejarRespuesta = (indiceOpcion) => {
    const esCorrecta = indiceOpcion === preguntas[indicePregunta].correcta;
    setRespuestaCorrecta(esCorrecta);
    setMostrarResultado(true);
  };

  const siguientePregunta = () => {
    if (indicePregunta < preguntas.length - 1) {
      setIndicePregunta(indicePregunta + 1);
      setMostrarResultado(false);
    } else {
      setMostrarResultado(false);
      alert("Muchas gracias por su atencion prestada, Doc Varela :)");
    }
  };

  return (
    <div className="App">
      <h1>Cuestionario Oracle RAC</h1>
      {mostrarResultado ? (
        <div>
          <h2>
            {respuestaCorrecta
              ? "Â¡La respuesta es correctaaaaa! ðŸŽ‰"
              : "Boooh respuesta mala ðŸ˜ž"}
          </h2>
          <button onClick={siguientePregunta}>
            {indicePregunta < preguntas.length - 1
              ? "Siguiente Pregunta"
              : "Finalizar"}
          </button>
        </div>
      ) : (
        <div>
          <h2>{preguntas[indicePregunta].pregunta}</h2>
          <div className="opciones">
            {preguntas[indicePregunta].opciones.map((opcion, index) => (
              <button
                key={index}
                onClick={() => manejarRespuesta(index)}
                className="opcion"
              >
                {opcion}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
